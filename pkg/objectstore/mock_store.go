// Code generated by mockery v2.10.0. DO NOT EDIT.

package objectstore

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockObjectStore is an autogenerated mock type for the ObjectStore type
type MockObjectStore struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *MockObjectStore) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDownloadURL provides a mock function with given fields: key
func (_m *MockObjectStore) GetDownloadURL(key string) (*PreSignedURL, error) {
	ret := _m.Called(key)

	var r0 *PreSignedURL
	if rf, ok := ret.Get(0).(func(string) *PreSignedURL); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PreSignedURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDownloadURLWithExpiration provides a mock function with given fields: key, expiration
func (_m *MockObjectStore) GetDownloadURLWithExpiration(key string, expiration time.Duration) (*PreSignedURL, error) {
	ret := _m.Called(key, expiration)

	var r0 *PreSignedURL
	if rf, ok := ret.Get(0).(func(string, time.Duration) *PreSignedURL); ok {
		r0 = rf(key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PreSignedURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = rf(key, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUploadURL provides a mock function with given fields: key
func (_m *MockObjectStore) GetUploadURL(key string) (*PreSignedURL, error) {
	ret := _m.Called(key)

	var r0 *PreSignedURL
	if rf, ok := ret.Get(0).(func(string) *PreSignedURL); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PreSignedURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUploadURLWithExpiration provides a mock function with given fields: key, expiration
func (_m *MockObjectStore) GetUploadURLWithExpiration(key string, expiration time.Duration) (*PreSignedURL, error) {
	ret := _m.Called(key, expiration)

	var r0 *PreSignedURL
	if rf, ok := ret.Get(0).(func(string, time.Duration) *PreSignedURL); ok {
		r0 = rf(key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PreSignedURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = rf(key, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
